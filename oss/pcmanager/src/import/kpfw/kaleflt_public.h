///////////////////////////////////////////////////////////////	
//	
// FileName  :  kaleflt_public.h
// Creator   :  yangzhenhui@kingsoft.com
// Date    	 :  2009-09-27  09:51
// Comment   :  
//
///////////////////////////////////////////////////////////////	
#ifndef ALEFILTER_PUBLIC_INC_
#define ALEFILTER_PUBLIC_INC_

#define KFW_MAJOR_VER	1
#define KFW_MINOR_VER	0

//////////////////////////////////////////////////////////////////////////

#define KALEFLT_NT_NAME                     L"\\Device\\KTdiFilt"
#define KALEFLT_DOS_NAME                    L"\\DosDevices\\KTdiFilt"
#define KALEFLT_LINK_NAME                   L"\\\\.\\KTdiFilt"


//////////////////////////////////////////////////////////////////////////

#define FILE_DEVICE_KTDIFLT                 FILE_DEVICE_NETWORK

//
// 获得驱动接口版本
//

#define IOCTL_KTDIFLT_GET_VERSION           CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0000, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 获得邮件监控上下层交互共享内存
//

#define IOCTL_KTDIFLT_GET_MAILMON_VIEW	    CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0001, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_FREE_MAILMON_VIEW     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0002, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 获得应用程序请求判断上下层交互共享内存
//

#define IOCTL_KTDIFLT_GET_REQUEST_VIEW      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0003, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_FREE_REQUEST_VIEW     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0004, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_KTDIFLT_ENUM_LISTEN           CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0005, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_ENUM_TCP_CONN         CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0006, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KDTIFLT_GET_FLUXS             CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0007, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 开启/关闭防火墙
//

#define IOCTL_KTDIFLT_ENABLE_FIREWALL       CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0008, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_DISABLE_FIREWALL      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0009, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 连接/断开网络
//

#define IOCTL_KTDIFLT_ENABLE_NETWORK        CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0010, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_DISABLE_NETWORK       CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0011, METHOD_BUFFERED, FILE_ANY_ACCESS)


#define IOCTL_KTDIFLT_GET_NETWORK_STATUS    CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0015, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_GET_FIREWALLL_STATUS  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0016, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 日志
//

#define IOCTL_KTDIFLT_GET_FIREWALL_LOG      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0017, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_GET_IP_RULES_LOG      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0018, METHOD_BUFFERED, FILE_ANY_ACCESS)


#define IOCTL_KTDIFLT_GET_URLS              CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0020, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_KTDIFLT_ADD_FILTER            CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0021, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_REMOVE_FILTER         CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0022, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// 静态表
//

#define IOCTL_KTDIFLT_GET_PEDOWNLOAD        CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0023, METHOD_BUFFERED, FILE_ANY_ACCESS)

//事件处理
#define IOCTL_KTDIFLT_REGISTER_EVENT        CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0024, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_GET_COMMON_EVENT      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0025, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_GET_ACTIVE_EVENT      CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0026, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_RESPONSE_EVENT        CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0027, METHOD_BUFFERED, FILE_ANY_ACCESS)

//进程流量
#define IOCTL_KTDIFLT_GET_PROCESS_FLUXS     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0028, METHOD_BUFFERED, FILE_ANY_ACCESS)

//清除Cache
#define IOCTL_KTDIFLT_CLEAR_RESULT_CACHE     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0029, METHOD_BUFFERED, FILE_ANY_ACCESS)

//程序流量
#define IOCTL_KTDIFLT_GET_PROGRAM_FLUXS     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0030, METHOD_BUFFERED, FILE_ANY_ACCESS)

//堆栈检测-模块信息
#define IOCTL_KTDIFLT_GET_MODULE_INFO     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0031, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_SET_MODULE_INFO     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0032, METHOD_BUFFERED, FILE_ANY_ACCESS)
//////////////////////////////////////////////////////////////////////////

//文件监控-获取列表
#define IOCTL_KTDIFLT_GET_MODULE_LIST     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0033, METHOD_BUFFERED, FILE_ANY_ACCESS)

//数据记录器
#define IOCTL_KTDIFLT_ADD_RECORDER     CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0034, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_REMOVE_RECORDER  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0035, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_CLEAR_RECORDER   CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0036, METHOD_BUFFERED, FILE_ANY_ACCESS)

//设置/清除本地开放端口
#define IOCTL_KTDIFLT_TCP_PORT_OPEN  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0037, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_TCP_PORT_CLOSE  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0038, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_UDP_PORT_OPEN  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0039, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KTDIFLT_UDP_PORT_CLOSE  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0040, METHOD_BUFFERED, FILE_ANY_ACCESS)


//获取端口函数
#define IOCTL_KTDIFLT_GET_PORT_FUNCTION  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0041, METHOD_BUFFERED, FILE_ANY_ACCESS)

//获取打开端口列表
#define IOCTL_KTDIFLT_GET_OPEN_PORT  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0042, METHOD_BUFFERED, FILE_ANY_ACCESS)

//设置向上请求标志
#define IOCTL_KTDIFLT_SET_REQUEST_FLAG  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0043, METHOD_BUFFERED, FILE_ANY_ACCESS)

//控制进程流量
#define IOCTL_KTDIFLT_SET_PROCESS_SPEED  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0044, METHOD_BUFFERED, FILE_ANY_ACCESS)

//从Cache中获取程序流量
#define IOCTL_KTDIFLT_GET_PROGRAM_FLUXS_FROM_CACHE  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0045, METHOD_BUFFERED, FILE_ANY_ACCESS)
//刷新Cache的时间阀值
#define IOCTL_KTDIFLT_SET_REFRESH_CACHE_TIMER  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0046, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_KTDIFLT_CONFIG_BOOTTIME  CTL_CODE(FILE_DEVICE_KTDIFLT, 0x0047, METHOD_BUFFERED, FILE_ANY_ACCESS)

//导出给NDIS使用,判断某端口是否打开
typedef BOOLEAN (__stdcall *fIsOpenPort)( ULONG protoType/*PROTO_TYPE*/, USHORT uPort );
//导出给NDIS使用,判断是否限速
typedef BOOLEAN (__stdcall *fIsTrafficCtrl)( ULONG protoType/*PROTO_TYPE*/, USHORT uPort, char dir, ULONG uBufferLen );
struct NDIS_PORT_FUNC
{
	fIsOpenPort IsOpenPort;
	fIsTrafficCtrl IsTrafficCtrl;
	volatile LONG* pRefCount;
};


typedef struct TdiEventRegister
{
	HANDLE hCommEvent;
	HANDLE hActiveEvent;
	USHORT  m_uMarVer;
	USHORT  m_uMinVer;
}TDI_EVENT_REGISTER;
/*
typedef enum tagApplicationRequestProtocol {

enumARP_TCP
enumARP_TCP_HTTP,
enumARP_TCP_HTTP_SSL,
enumARP_TCP_HTTP_PROXY,
enumARP_TCP_POP3,
enumARP_TCP_POP3_SSL,
enumARP_TCP_SMTP,
enumARP_TCP_SMTP_SSL,
enumARP_TCP_MSN,
enumARP_TCP_NNTP,
enumARP_TCP_NNTP_SSL,
enumARP_TCP_FTP_CTRL,
enumARP_TCP_FTP_DATA,
enumARP_TCP_IMAP3,
enumARP_TCP_IMAP4,
enumARP_TCP_IMAP4_SSL,
enumARP_TCP_MSRDP,
enumARP_TCP_MSSQL,
enumARP_TCP_TELNET,
enumARP_TCP_X_WINDOW
enumARP_TCP_YAHOO_MESSENGER,
enumARP_TCP_BITTORRENT,
enumARP_TCP_DNS,
enumARP_TCP_EMULE,
enumARP_TCP_MSN,
enumARP_TCP_NETBIOS,
enumARP_TCP_NFS,
enumARP_TCP_PPLIVE,
enumARP_TCP_SFTP,
enumARP_TCP_SQL,
enumARP_TCP_SSH,
enumARP_TCP_WINS,
enumARP_TCP_OTHER,
enumARP_UDP,
enumARP_UDP_NETBIOS,
enumARP_UDP_QQ_KEEP_ALIVE,
enumARP_UDP_QQ_LOGIN,
enumARP_UDP_QQ_LOGOUT,
enumARP_UDP_QQ_RECV_MSG,
enumARP_UDP_QQ_SEND_MSG,
enumARP_UDP_QQ_OTHER,
enumARP_UDP_SNMP,
enumARP_UDP_BITTORRENT,
enumARP_UDP_EMULE,
enumARP_UDP_PPLIVE,
enumARP_UDP_SSDP,
enumARP_UDP_NDS,
enumARP_UDP_HTTP_PROXY,
enumARP_UDP_HTTPS,
enumARP_UDP_MSN,
enumARP_UDP_NETBIOS,
enumARP_UDP_NFS,
enumARP_ICMP,
enumARP_IGMP

} APP_REQUEST_PROTOCOL;
*/

//////////////////////////////////////////////////////////////////////////

#endif  // !TDIFILTER_PUBLIC_INC_

