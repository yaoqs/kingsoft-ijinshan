// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "netmonlog.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace netmon {

namespace {

const ::google::protobuf::Descriptor* KNetMonLogHeader_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagTCP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagUDP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagICMP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagIGMP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KLOG_IP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_MODULE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_APP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IP_RANGE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PORT_RANGE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTER_IP_ADDR_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTER_IP_PORT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_APP_RULE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagTCP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagUDP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagICMP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagIGMP_DATA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FILTER_INFO_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_IP_RULE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_ARP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_AREA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_AREA_AREA_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_USER_SETTING_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_DEBUG_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_UPDATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LOG_SHEID_descriptor_ = NULL;

}  // namespace


void proto_BuildDescriptors_netmonlog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  const ::google::protobuf::FileDescriptor* file = pool->InternalBuildGeneratedFile(
    "\n\017netmonlog.proto\022\006netmon\"5\n\020KNetMonLogH"
    "eader\022\022\n\nm_eLogType\030\001 \002(\005\022\r\n\005m_nID\030\002 \002(\004"
    "\"\300\003\n\017IPLOG_EXTRADATA\0225\n\010TCP_DATA\030\001 \001(\0132#"
    ".netmon.IPLOG_EXTRADATA.tagTCP_DATA\0225\n\010U"
    "DP_DATA\030\002 \001(\0132#.netmon.IPLOG_EXTRADATA.t"
    "agUDP_DATA\0227\n\tICMP_DATA\030\003 \001(\0132$.netmon.I"
    "PLOG_EXTRADATA.tagICMP_DATA\0227\n\tIGMP_DATA"
    "\030\004 \001(\0132$.netmon.IPLOG_EXTRADATA.tagIGMP_"
    "DATA\032H\n\013tagTCP_DATA\022\021\n\tlocalPort\030\001 \001(\005\022\022"
    "\n\nremotePort\030\002 \001(\005\022\022\n\nbyTcpFlags\030\003 \001(\005\0324"
    "\n\013tagUDP_DATA\022\021\n\tlocalPort\030\001 \001(\005\022\022\n\nremo"
    "tePort\030\002 \001(\005\032.\n\014tagICMP_DATA\022\016\n\006byType\030\001"
    " \001(\005\022\016\n\006byCode\030\002 \001(\005\032\035\n\014tagIGMP_DATA\022\r\n\005"
    "empty\030\001 \001(\005\"\334\001\n\007KLOG_IP\022\n\n\002id\030\001 \001(\014\022\014\n\004t"
    "ime\030\002 \001(\003\022\016\n\006nCount\030\003 \001(\r\022\026\n\016byProtocolT"
    "ype\030\004 \001(\005\022\021\n\tLocalAddr\030\005 \001(\r\022\022\n\nRemoteAd"
    "dr\030\006 \001(\r\022\023\n\013byDirection\030\007 \001(\005\022\022\n\nnOperat"
    "ion\030\010 \001(\005\022\023\n\013nAttackType\030\t \001(\r\022*\n\tExtraI"
    "nfo\030\n \001(\0132\027.netmon.IPLOG_EXTRADATA\"g\n\nLO"
    "G_MODULE\022\016\n\006userid\030\001 \001(\014\022\022\n\nmodulePath\030\002"
    " \001(\014\022\022\n\ntrustModle\030\003 \001(\r\022\021\n\tuserModle\030\004 "
    "\001(\r\022\016\n\006popRes\030\005 \001(\r\"\243\002\n\007LOG_APP\022\r\n\005eFlag"
    "\030\001 \001(\005\022\027\n\017dwRemoteAddress\030\002 \001(\r\022\026\n\016dwLoc"
    "alAddress\030\003 \001(\r\022\023\n\013wRemotePort\030\004 \001(\005\022\022\n\n"
    "wLocalPort\030\005 \001(\005\022\024\n\014nRequestType\030\006 \001(\005\022\030"
    "\n\020nRequestProtocol\030\007 \001(\005\022\014\n\004time\030\010 \001(\003\022\021"
    "\n\tnBehavior\030\t \001(\005\022%\n\texeModule\030\n \001(\0132\022.n"
    "etmon.LOG_MODULE\022&\n\ndllModules\030\013 \003(\0132\022.n"
    "etmon.LOG_MODULE\022\017\n\007lanpath\030\014 \001(\014\"0\n\010IP_"
    "RANGE\022\022\n\naddr_start\030\001 \001(\005\022\020\n\010addr_end\030\002 "
    "\001(\005\"2\n\nPORT_RANGE\022\022\n\nport_start\030\001 \001(\005\022\020\n"
    "\010port_end\030\002 \001(\005\"Y\n\016FILTER_IP_ADDR\022\020\n\010add"
    "rmode\030\001 \001(\005\022\016\n\006ipaddr\030\002 \001(\005\022%\n\taddrrange"
    "\030\003 \001(\0132\022.netmon.PORT_RANGE\"W\n\016FILTER_IP_"
    "PORT\022\020\n\010addrmode\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022%\n\t"
    "portrange\030\003 \001(\0132\022.netmon.PORT_RANGE\"\374\002\n\014"
    "LOG_APP_RULE\022\016\n\006userid\030\001 \001(\014\022\016\n\006ruleid\030\002"
    " \001(\014\022\022\n\nmodulepath\030\003 \001(\014\022\020\n\010checksum\030\004 \001"
    "(\014\0224\n\024tcp_remote_denyports\030\005 \003(\0132\026.netmo"
    "n.FILTER_IP_PORT\0224\n\024tcp_local_deny_ports"
    "\030\006 \003(\0132\026.netmon.FILTER_IP_PORT\0224\n\024udp_re"
    "mote_denyports\030\007 \003(\0132\026.netmon.FILTER_IP_"
    "PORT\0224\n\024udp_local_deny_ports\030\010 \003(\0132\026.net"
    "mon.FILTER_IP_PORT\022\021\n\ttrustmode\030\t \001(\005\022\020\n"
    "\010usermode\030\n \001(\005\022\r\n\005eFlag\030\013 \001(\005\022\014\n\004time\030\014"
    " \001(\003\022\014\n\004bDll\030\r \001(\005\"\271\004\n\024FILTERINFO_EXTRAD"
    "ATA\022:\n\010TCP_DATA\030\001 \001(\0132(.netmon.FILTERINF"
    "O_EXTRADATA.tagTCP_DATA\022:\n\010UDP_DATA\030\002 \001("
    "\0132(.netmon.FILTERINFO_EXTRADATA.tagUDP_D"
    "ATA\022<\n\tICMP_DATA\030\003 \001(\0132).netmon.FILTERIN"
    "FO_EXTRADATA.tagICMP_DATA\022<\n\tIGMP_DATA\030\004"
    " \001(\0132).netmon.FILTERINFO_EXTRADATA.tagIG"
    "MP_DATA\032x\n\013tagTCP_DATA\022)\n\tlocalPort\030\001 \001("
    "\0132\026.netmon.FILTER_IP_PORT\022*\n\nremotePort\030"
    "\002 \001(\0132\026.netmon.FILTER_IP_PORT\022\022\n\nbyTcpFl"
    "ags\030\003 \001(\005\032d\n\013tagUDP_DATA\022)\n\tlocalPort\030\001 "
    "\001(\0132\026.netmon.FILTER_IP_PORT\022*\n\nremotePor"
    "t\030\002 \001(\0132\026.netmon.FILTER_IP_PORT\032.\n\014tagIC"
    "MP_DATA\022\016\n\006byType\030\001 \001(\005\022\016\n\006byCode\030\002 \001(\005\032"
    "\035\n\014tagIGMP_DATA\022\r\n\005empty\030\001 \001(\005\"\322\001\n\013FILTE"
    "R_INFO\022\024\n\014protocoltype\030\001 \001(\005\022\021\n\tdirectio"
    "n\030\002 \001(\005\022\021\n\toperation\030\003 \001(\005\022)\n\tlocaladdr\030"
    "\004 \001(\0132\026.netmon.FILTER_IP_ADDR\022*\n\nremotea"
    "ddr\030\005 \001(\0132\026.netmon.FILTER_IP_ADDR\0220\n\next"
    "erndata\030\006 \001(\0132\034.netmon.FILTERINFO_EXTRAD"
    "ATA\"s\n\013LOG_IP_RULE\022\016\n\006userid\030\001 \001(\014\022\016\n\006ru"
    "leid\030\002 \001(\014\022\014\n\004name\030\003 \001(\014\022\r\n\005valid\030\004 \001(\005\022"
    "\'\n\nfilterinfo\030\005 \001(\0132\023.netmon.FILTER_INFO"
    "\"\311\001\n\007LOG_ARP\022\r\n\005count\030\001 \001(\005\022\022\n\nblock_typ"
    "e\030\002 \001(\005\022\023\n\013eh_destaddr\030\003 \001(\014\022\022\n\neh_srcad"
    "dr\030\004 \001(\014\022\030\n\020arp_sender_haddr\030\005 \001(\014\022\027\n\017ar"
    "p_sender_addr\030\006 \001(\r\022\030\n\020arp_target_haddr\030"
    "\007 \001(\014\022\027\n\017arp_target_addr\030\010 \001(\r\022\014\n\004time\030\t"
    " \001(\003\"\343\001\n\010LOG_AREA\022\'\n\010new_area\030\001 \001(\0132\025.ne"
    "tmon.LOG_AREA.AREA\022\'\n\010old_area\030\002 \001(\0132\025.n"
    "etmon.LOG_AREA.AREA\022\020\n\010area_opt\030\003 \001(\r\022\014\n"
    "\004time\030\004 \001(\003\032e\n\004AREA\022\021\n\tarea_name\030\001 \001(\014\022\021"
    "\n\tarea_type\030\002 \001(\r\022\024\n\014area_gatemac\030\003 \001(\014\022"
    "\023\n\013area_gateip\030\004 \001(\r\022\014\n\004time\030\005 \001(\014\";\n\020LO"
    "G_USER_SETTING\022\014\n\004type\030\001 \001(\r\022\013\n\003opt\030\002 \001("
    "\r\022\014\n\004time\030\003 \001(\003\"R\n\tLOG_DEBUG\022\014\n\004time\030\001 \001"
    "(\003\022\022\n\nbug_module\030\002 \001(\014\022\020\n\010bug_type\030\003 \001(\r"
    "\022\021\n\tbug_level\030\004 \001(\r\"e\n\nLOG_UPDATE\022\014\n\004tim"
    "e\030\001 \001(\003\022\023\n\013update_file\030\002 \001(\014\022\021\n\tfile_typ"
    "e\030\003 \001(\r\022\017\n\007breboot\030\004 \001(\r\022\020\n\010bsuccess\030\005 \001"
    "(\010\"l\n\tLOG_SHEID\022\014\n\004time\030\001 \001(\004\022\023\n\013block_p"
    "c_ip\030\002 \001(\005\022\024\n\014attack_times\030\003 \001(\r\022\023\n\013atta"
    "ck_type\030\004 \001(\r\022\021\n\treason_id\030\005 \001(\014", 3512);
  KNetMonLogHeader_descriptor_ = file->message_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KNetMonLogHeader_descriptor_, &KNetMonLogHeader::default_instance());
  IPLOG_EXTRADATA_descriptor_ = file->message_type(1);
  IPLOG_EXTRADATA_tagTCP_DATA_descriptor_ = IPLOG_EXTRADATA_descriptor_->nested_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPLOG_EXTRADATA_tagTCP_DATA_descriptor_, &IPLOG_EXTRADATA_tagTCP_DATA::default_instance());
  IPLOG_EXTRADATA_tagUDP_DATA_descriptor_ = IPLOG_EXTRADATA_descriptor_->nested_type(1);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPLOG_EXTRADATA_tagUDP_DATA_descriptor_, &IPLOG_EXTRADATA_tagUDP_DATA::default_instance());
  IPLOG_EXTRADATA_tagICMP_DATA_descriptor_ = IPLOG_EXTRADATA_descriptor_->nested_type(2);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPLOG_EXTRADATA_tagICMP_DATA_descriptor_, &IPLOG_EXTRADATA_tagICMP_DATA::default_instance());
  IPLOG_EXTRADATA_tagIGMP_DATA_descriptor_ = IPLOG_EXTRADATA_descriptor_->nested_type(3);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPLOG_EXTRADATA_tagIGMP_DATA_descriptor_, &IPLOG_EXTRADATA_tagIGMP_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPLOG_EXTRADATA_descriptor_, &IPLOG_EXTRADATA::default_instance());
  KLOG_IP_descriptor_ = file->message_type(2);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KLOG_IP_descriptor_, &KLOG_IP::default_instance());
  LOG_MODULE_descriptor_ = file->message_type(3);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_MODULE_descriptor_, &LOG_MODULE::default_instance());
  LOG_APP_descriptor_ = file->message_type(4);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_APP_descriptor_, &LOG_APP::default_instance());
  IP_RANGE_descriptor_ = file->message_type(5);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IP_RANGE_descriptor_, &IP_RANGE::default_instance());
  PORT_RANGE_descriptor_ = file->message_type(6);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PORT_RANGE_descriptor_, &PORT_RANGE::default_instance());
  FILTER_IP_ADDR_descriptor_ = file->message_type(7);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTER_IP_ADDR_descriptor_, &FILTER_IP_ADDR::default_instance());
  FILTER_IP_PORT_descriptor_ = file->message_type(8);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTER_IP_PORT_descriptor_, &FILTER_IP_PORT::default_instance());
  LOG_APP_RULE_descriptor_ = file->message_type(9);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_APP_RULE_descriptor_, &LOG_APP_RULE::default_instance());
  FILTERINFO_EXTRADATA_descriptor_ = file->message_type(10);
  FILTERINFO_EXTRADATA_tagTCP_DATA_descriptor_ = FILTERINFO_EXTRADATA_descriptor_->nested_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTERINFO_EXTRADATA_tagTCP_DATA_descriptor_, &FILTERINFO_EXTRADATA_tagTCP_DATA::default_instance());
  FILTERINFO_EXTRADATA_tagUDP_DATA_descriptor_ = FILTERINFO_EXTRADATA_descriptor_->nested_type(1);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTERINFO_EXTRADATA_tagUDP_DATA_descriptor_, &FILTERINFO_EXTRADATA_tagUDP_DATA::default_instance());
  FILTERINFO_EXTRADATA_tagICMP_DATA_descriptor_ = FILTERINFO_EXTRADATA_descriptor_->nested_type(2);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTERINFO_EXTRADATA_tagICMP_DATA_descriptor_, &FILTERINFO_EXTRADATA_tagICMP_DATA::default_instance());
  FILTERINFO_EXTRADATA_tagIGMP_DATA_descriptor_ = FILTERINFO_EXTRADATA_descriptor_->nested_type(3);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTERINFO_EXTRADATA_tagIGMP_DATA_descriptor_, &FILTERINFO_EXTRADATA_tagIGMP_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTERINFO_EXTRADATA_descriptor_, &FILTERINFO_EXTRADATA::default_instance());
  FILTER_INFO_descriptor_ = file->message_type(11);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILTER_INFO_descriptor_, &FILTER_INFO::default_instance());
  LOG_IP_RULE_descriptor_ = file->message_type(12);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_IP_RULE_descriptor_, &LOG_IP_RULE::default_instance());
  LOG_ARP_descriptor_ = file->message_type(13);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_ARP_descriptor_, &LOG_ARP::default_instance());
  LOG_AREA_descriptor_ = file->message_type(14);
  LOG_AREA_AREA_descriptor_ = LOG_AREA_descriptor_->nested_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_AREA_AREA_descriptor_, &LOG_AREA_AREA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_AREA_descriptor_, &LOG_AREA::default_instance());
  LOG_USER_SETTING_descriptor_ = file->message_type(15);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_USER_SETTING_descriptor_, &LOG_USER_SETTING::default_instance());
  LOG_DEBUG_descriptor_ = file->message_type(16);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_DEBUG_descriptor_, &LOG_DEBUG::default_instance());
  LOG_UPDATE_descriptor_ = file->message_type(17);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_UPDATE_descriptor_, &LOG_UPDATE::default_instance());
  LOG_SHEID_descriptor_ = file->message_type(18);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOG_SHEID_descriptor_, &LOG_SHEID::default_instance());
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netmonlog_2eproto {
  StaticDescriptorInitializer_netmonlog_2eproto() {
    proto_BuildDescriptors_netmonlog_2eproto();
  }
} static_descriptor_initializer_netmonlog_2eproto_;


// ===================================================================

const KNetMonLogHeader KNetMonLogHeader::default_instance_;



const int KNetMonLogHeader::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KNetMonLogHeader, m_elogtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KNetMonLogHeader, m_nid_),
};

KNetMonLogHeader::KNetMonLogHeader()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    m_elogtype_(0),
    m_nid_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

KNetMonLogHeader::KNetMonLogHeader(const KNetMonLogHeader& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    m_elogtype_(0),
    m_nid_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

KNetMonLogHeader::~KNetMonLogHeader() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KNetMonLogHeader::descriptor() {
  if (KNetMonLogHeader_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return KNetMonLogHeader_descriptor_;
}

KNetMonLogHeader* KNetMonLogHeader::New() const {
  return new KNetMonLogHeader;
}

const ::google::protobuf::Descriptor* KNetMonLogHeader::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
KNetMonLogHeader::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* KNetMonLogHeader::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const IPLOG_EXTRADATA_tagTCP_DATA IPLOG_EXTRADATA_tagTCP_DATA::default_instance_;




const int IPLOG_EXTRADATA_tagTCP_DATA::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagTCP_DATA, localport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagTCP_DATA, remoteport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagTCP_DATA, bytcpflags_),
};

IPLOG_EXTRADATA_tagTCP_DATA::IPLOG_EXTRADATA_tagTCP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(0),
    remoteport_(0),
    bytcpflags_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

IPLOG_EXTRADATA_tagTCP_DATA::IPLOG_EXTRADATA_tagTCP_DATA(const IPLOG_EXTRADATA_tagTCP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(0),
    remoteport_(0),
    bytcpflags_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IPLOG_EXTRADATA_tagTCP_DATA::~IPLOG_EXTRADATA_tagTCP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagTCP_DATA::descriptor() {
  if (IPLOG_EXTRADATA_tagTCP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IPLOG_EXTRADATA_tagTCP_DATA_descriptor_;
}

IPLOG_EXTRADATA_tagTCP_DATA* IPLOG_EXTRADATA_tagTCP_DATA::New() const {
  return new IPLOG_EXTRADATA_tagTCP_DATA;
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagTCP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IPLOG_EXTRADATA_tagTCP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IPLOG_EXTRADATA_tagTCP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const IPLOG_EXTRADATA_tagUDP_DATA IPLOG_EXTRADATA_tagUDP_DATA::default_instance_;



const int IPLOG_EXTRADATA_tagUDP_DATA::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagUDP_DATA, localport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagUDP_DATA, remoteport_),
};

IPLOG_EXTRADATA_tagUDP_DATA::IPLOG_EXTRADATA_tagUDP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(0),
    remoteport_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

IPLOG_EXTRADATA_tagUDP_DATA::IPLOG_EXTRADATA_tagUDP_DATA(const IPLOG_EXTRADATA_tagUDP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(0),
    remoteport_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IPLOG_EXTRADATA_tagUDP_DATA::~IPLOG_EXTRADATA_tagUDP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagUDP_DATA::descriptor() {
  if (IPLOG_EXTRADATA_tagUDP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IPLOG_EXTRADATA_tagUDP_DATA_descriptor_;
}

IPLOG_EXTRADATA_tagUDP_DATA* IPLOG_EXTRADATA_tagUDP_DATA::New() const {
  return new IPLOG_EXTRADATA_tagUDP_DATA;
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagUDP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IPLOG_EXTRADATA_tagUDP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IPLOG_EXTRADATA_tagUDP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const IPLOG_EXTRADATA_tagICMP_DATA IPLOG_EXTRADATA_tagICMP_DATA::default_instance_;



const int IPLOG_EXTRADATA_tagICMP_DATA::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagICMP_DATA, bytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagICMP_DATA, bycode_),
};

IPLOG_EXTRADATA_tagICMP_DATA::IPLOG_EXTRADATA_tagICMP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    bytype_(0),
    bycode_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

IPLOG_EXTRADATA_tagICMP_DATA::IPLOG_EXTRADATA_tagICMP_DATA(const IPLOG_EXTRADATA_tagICMP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    bytype_(0),
    bycode_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IPLOG_EXTRADATA_tagICMP_DATA::~IPLOG_EXTRADATA_tagICMP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagICMP_DATA::descriptor() {
  if (IPLOG_EXTRADATA_tagICMP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IPLOG_EXTRADATA_tagICMP_DATA_descriptor_;
}

IPLOG_EXTRADATA_tagICMP_DATA* IPLOG_EXTRADATA_tagICMP_DATA::New() const {
  return new IPLOG_EXTRADATA_tagICMP_DATA;
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagICMP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IPLOG_EXTRADATA_tagICMP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IPLOG_EXTRADATA_tagICMP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const IPLOG_EXTRADATA_tagIGMP_DATA IPLOG_EXTRADATA_tagIGMP_DATA::default_instance_;


const int IPLOG_EXTRADATA_tagIGMP_DATA::_offsets_[1] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA_tagIGMP_DATA, empty_),
};

IPLOG_EXTRADATA_tagIGMP_DATA::IPLOG_EXTRADATA_tagIGMP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    empty_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

IPLOG_EXTRADATA_tagIGMP_DATA::IPLOG_EXTRADATA_tagIGMP_DATA(const IPLOG_EXTRADATA_tagIGMP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    empty_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IPLOG_EXTRADATA_tagIGMP_DATA::~IPLOG_EXTRADATA_tagIGMP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagIGMP_DATA::descriptor() {
  if (IPLOG_EXTRADATA_tagIGMP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IPLOG_EXTRADATA_tagIGMP_DATA_descriptor_;
}

IPLOG_EXTRADATA_tagIGMP_DATA* IPLOG_EXTRADATA_tagIGMP_DATA::New() const {
  return new IPLOG_EXTRADATA_tagIGMP_DATA;
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA_tagIGMP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IPLOG_EXTRADATA_tagIGMP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IPLOG_EXTRADATA_tagIGMP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const IPLOG_EXTRADATA IPLOG_EXTRADATA::default_instance_;





const int IPLOG_EXTRADATA::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA, tcp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA, udp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA, icmp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPLOG_EXTRADATA, igmp_data_),
};

IPLOG_EXTRADATA::IPLOG_EXTRADATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    tcp_data_(NULL),
    udp_data_(NULL),
    icmp_data_(NULL),
    igmp_data_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    tcp_data_ = const_cast< ::netmon::IPLOG_EXTRADATA_tagTCP_DATA*>(&::netmon::IPLOG_EXTRADATA_tagTCP_DATA::default_instance());
    udp_data_ = const_cast< ::netmon::IPLOG_EXTRADATA_tagUDP_DATA*>(&::netmon::IPLOG_EXTRADATA_tagUDP_DATA::default_instance());
    icmp_data_ = const_cast< ::netmon::IPLOG_EXTRADATA_tagICMP_DATA*>(&::netmon::IPLOG_EXTRADATA_tagICMP_DATA::default_instance());
    igmp_data_ = const_cast< ::netmon::IPLOG_EXTRADATA_tagIGMP_DATA*>(&::netmon::IPLOG_EXTRADATA_tagIGMP_DATA::default_instance());
  }
}

IPLOG_EXTRADATA::IPLOG_EXTRADATA(const IPLOG_EXTRADATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    tcp_data_(NULL),
    udp_data_(NULL),
    icmp_data_(NULL),
    igmp_data_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IPLOG_EXTRADATA::~IPLOG_EXTRADATA() {
  if (this != &default_instance_) {
    delete tcp_data_;
    delete udp_data_;
    delete icmp_data_;
    delete igmp_data_;
  }
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA::descriptor() {
  if (IPLOG_EXTRADATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IPLOG_EXTRADATA_descriptor_;
}

IPLOG_EXTRADATA* IPLOG_EXTRADATA::New() const {
  return new IPLOG_EXTRADATA;
}

const ::google::protobuf::Descriptor* IPLOG_EXTRADATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IPLOG_EXTRADATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IPLOG_EXTRADATA::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const KLOG_IP KLOG_IP::default_instance_;

const ::std::string KLOG_IP::_default_id_;









const int KLOG_IP::_offsets_[10] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, ncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, byprotocoltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, localaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, remoteaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, bydirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, noperation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, nattacktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLOG_IP, extrainfo_),
};

KLOG_IP::KLOG_IP()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    id_(const_cast< ::std::string*>(&_default_id_)),
    time_(GOOGLE_LONGLONG(0)),
    ncount_(0u),
    byprotocoltype_(0),
    localaddr_(0u),
    remoteaddr_(0u),
    bydirection_(0),
    noperation_(0),
    nattacktype_(0u),
    extrainfo_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    extrainfo_ = const_cast< ::netmon::IPLOG_EXTRADATA*>(&::netmon::IPLOG_EXTRADATA::default_instance());
  }
}

KLOG_IP::KLOG_IP(const KLOG_IP& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    id_(const_cast< ::std::string*>(&_default_id_)),
    time_(GOOGLE_LONGLONG(0)),
    ncount_(0u),
    byprotocoltype_(0),
    localaddr_(0u),
    remoteaddr_(0u),
    bydirection_(0),
    noperation_(0),
    nattacktype_(0u),
    extrainfo_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

KLOG_IP::~KLOG_IP() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != &default_instance_) {
    delete extrainfo_;
  }
}

const ::google::protobuf::Descriptor* KLOG_IP::descriptor() {
  if (KLOG_IP_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return KLOG_IP_descriptor_;
}

KLOG_IP* KLOG_IP::New() const {
  return new KLOG_IP;
}

const ::google::protobuf::Descriptor* KLOG_IP::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
KLOG_IP::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* KLOG_IP::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_MODULE LOG_MODULE::default_instance_;

const ::std::string LOG_MODULE::_default_userid_;
const ::std::string LOG_MODULE::_default_modulepath_;



const int LOG_MODULE::_offsets_[5] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_MODULE, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_MODULE, modulepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_MODULE, trustmodle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_MODULE, usermodle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_MODULE, popres_),
};

LOG_MODULE::LOG_MODULE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    modulepath_(const_cast< ::std::string*>(&_default_modulepath_)),
    trustmodle_(0u),
    usermodle_(0u),
    popres_(0u) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_MODULE::LOG_MODULE(const LOG_MODULE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    modulepath_(const_cast< ::std::string*>(&_default_modulepath_)),
    trustmodle_(0u),
    usermodle_(0u),
    popres_(0u) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_MODULE::~LOG_MODULE() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (modulepath_ != &_default_modulepath_) {
    delete modulepath_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_MODULE::descriptor() {
  if (LOG_MODULE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_MODULE_descriptor_;
}

LOG_MODULE* LOG_MODULE::New() const {
  return new LOG_MODULE;
}

const ::google::protobuf::Descriptor* LOG_MODULE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_MODULE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_MODULE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_APP LOG_APP::default_instance_;












const ::std::string LOG_APP::_default_lanpath_;
const int LOG_APP::_offsets_[12] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, eflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, dwremoteaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, dwlocaladdress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, wremoteport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, wlocalport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, nrequesttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, nrequestprotocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, nbehavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, exemodule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, dllmodules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP, lanpath_),
};

LOG_APP::LOG_APP()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    eflag_(0),
    dwremoteaddress_(0u),
    dwlocaladdress_(0u),
    wremoteport_(0),
    wlocalport_(0),
    nrequesttype_(0),
    nrequestprotocol_(0),
    time_(GOOGLE_LONGLONG(0)),
    nbehavior_(0),
    exemodule_(NULL),
    lanpath_(const_cast< ::std::string*>(&_default_lanpath_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    exemodule_ = const_cast< ::netmon::LOG_MODULE*>(&::netmon::LOG_MODULE::default_instance());
  }
}

LOG_APP::LOG_APP(const LOG_APP& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    eflag_(0),
    dwremoteaddress_(0u),
    dwlocaladdress_(0u),
    wremoteport_(0),
    wlocalport_(0),
    nrequesttype_(0),
    nrequestprotocol_(0),
    time_(GOOGLE_LONGLONG(0)),
    nbehavior_(0),
    exemodule_(NULL),
    lanpath_(const_cast< ::std::string*>(&_default_lanpath_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_APP::~LOG_APP() {
  if (lanpath_ != &_default_lanpath_) {
    delete lanpath_;
  }
  if (this != &default_instance_) {
    delete exemodule_;
  }
}

const ::google::protobuf::Descriptor* LOG_APP::descriptor() {
  if (LOG_APP_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_APP_descriptor_;
}

LOG_APP* LOG_APP::New() const {
  return new LOG_APP;
}

const ::google::protobuf::Descriptor* LOG_APP::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_APP::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_APP::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const IP_RANGE IP_RANGE::default_instance_;



const int IP_RANGE::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_RANGE, addr_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_RANGE, addr_end_),
};

IP_RANGE::IP_RANGE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addr_start_(0),
    addr_end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

IP_RANGE::IP_RANGE(const IP_RANGE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addr_start_(0),
    addr_end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

IP_RANGE::~IP_RANGE() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IP_RANGE::descriptor() {
  if (IP_RANGE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return IP_RANGE_descriptor_;
}

IP_RANGE* IP_RANGE::New() const {
  return new IP_RANGE;
}

const ::google::protobuf::Descriptor* IP_RANGE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
IP_RANGE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* IP_RANGE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const PORT_RANGE PORT_RANGE::default_instance_;



const int PORT_RANGE::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PORT_RANGE, port_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PORT_RANGE, port_end_),
};

PORT_RANGE::PORT_RANGE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    port_start_(0),
    port_end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

PORT_RANGE::PORT_RANGE(const PORT_RANGE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    port_start_(0),
    port_end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

PORT_RANGE::~PORT_RANGE() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PORT_RANGE::descriptor() {
  if (PORT_RANGE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return PORT_RANGE_descriptor_;
}

PORT_RANGE* PORT_RANGE::New() const {
  return new PORT_RANGE;
}

const ::google::protobuf::Descriptor* PORT_RANGE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
PORT_RANGE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* PORT_RANGE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const FILTER_IP_ADDR FILTER_IP_ADDR::default_instance_;




const int FILTER_IP_ADDR::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_ADDR, addrmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_ADDR, ipaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_ADDR, addrrange_),
};

FILTER_IP_ADDR::FILTER_IP_ADDR()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addrmode_(0),
    ipaddr_(0),
    addrrange_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    addrrange_ = const_cast< ::netmon::PORT_RANGE*>(&::netmon::PORT_RANGE::default_instance());
  }
}

FILTER_IP_ADDR::FILTER_IP_ADDR(const FILTER_IP_ADDR& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addrmode_(0),
    ipaddr_(0),
    addrrange_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTER_IP_ADDR::~FILTER_IP_ADDR() {
  if (this != &default_instance_) {
    delete addrrange_;
  }
}

const ::google::protobuf::Descriptor* FILTER_IP_ADDR::descriptor() {
  if (FILTER_IP_ADDR_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTER_IP_ADDR_descriptor_;
}

FILTER_IP_ADDR* FILTER_IP_ADDR::New() const {
  return new FILTER_IP_ADDR;
}

const ::google::protobuf::Descriptor* FILTER_IP_ADDR::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTER_IP_ADDR::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTER_IP_ADDR::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const FILTER_IP_PORT FILTER_IP_PORT::default_instance_;




const int FILTER_IP_PORT::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_PORT, addrmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_PORT, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_IP_PORT, portrange_),
};

FILTER_IP_PORT::FILTER_IP_PORT()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addrmode_(0),
    port_(0),
    portrange_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    portrange_ = const_cast< ::netmon::PORT_RANGE*>(&::netmon::PORT_RANGE::default_instance());
  }
}

FILTER_IP_PORT::FILTER_IP_PORT(const FILTER_IP_PORT& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    addrmode_(0),
    port_(0),
    portrange_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTER_IP_PORT::~FILTER_IP_PORT() {
  if (this != &default_instance_) {
    delete portrange_;
  }
}

const ::google::protobuf::Descriptor* FILTER_IP_PORT::descriptor() {
  if (FILTER_IP_PORT_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTER_IP_PORT_descriptor_;
}

FILTER_IP_PORT* FILTER_IP_PORT::New() const {
  return new FILTER_IP_PORT;
}

const ::google::protobuf::Descriptor* FILTER_IP_PORT::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTER_IP_PORT::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTER_IP_PORT::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_APP_RULE LOG_APP_RULE::default_instance_;

const ::std::string LOG_APP_RULE::_default_userid_;
const ::std::string LOG_APP_RULE::_default_ruleid_;
const ::std::string LOG_APP_RULE::_default_modulepath_;
const ::std::string LOG_APP_RULE::_default_checksum_;









const int LOG_APP_RULE::_offsets_[13] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, ruleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, modulepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, tcp_remote_denyports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, tcp_local_deny_ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, udp_remote_denyports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, udp_local_deny_ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, trustmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, usermode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, eflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_APP_RULE, bdll_),
};

LOG_APP_RULE::LOG_APP_RULE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    ruleid_(const_cast< ::std::string*>(&_default_ruleid_)),
    modulepath_(const_cast< ::std::string*>(&_default_modulepath_)),
    checksum_(const_cast< ::std::string*>(&_default_checksum_)),
    trustmode_(0),
    usermode_(0),
    eflag_(0),
    time_(GOOGLE_LONGLONG(0)),
    bdll_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_APP_RULE::LOG_APP_RULE(const LOG_APP_RULE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    ruleid_(const_cast< ::std::string*>(&_default_ruleid_)),
    modulepath_(const_cast< ::std::string*>(&_default_modulepath_)),
    checksum_(const_cast< ::std::string*>(&_default_checksum_)),
    trustmode_(0),
    usermode_(0),
    eflag_(0),
    time_(GOOGLE_LONGLONG(0)),
    bdll_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_APP_RULE::~LOG_APP_RULE() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (ruleid_ != &_default_ruleid_) {
    delete ruleid_;
  }
  if (modulepath_ != &_default_modulepath_) {
    delete modulepath_;
  }
  if (checksum_ != &_default_checksum_) {
    delete checksum_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_APP_RULE::descriptor() {
  if (LOG_APP_RULE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_APP_RULE_descriptor_;
}

LOG_APP_RULE* LOG_APP_RULE::New() const {
  return new LOG_APP_RULE;
}

const ::google::protobuf::Descriptor* LOG_APP_RULE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_APP_RULE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_APP_RULE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const FILTERINFO_EXTRADATA_tagTCP_DATA FILTERINFO_EXTRADATA_tagTCP_DATA::default_instance_;




const int FILTERINFO_EXTRADATA_tagTCP_DATA::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagTCP_DATA, localport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagTCP_DATA, remoteport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagTCP_DATA, bytcpflags_),
};

FILTERINFO_EXTRADATA_tagTCP_DATA::FILTERINFO_EXTRADATA_tagTCP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(NULL),
    remoteport_(NULL),
    bytcpflags_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    localport_ = const_cast< ::netmon::FILTER_IP_PORT*>(&::netmon::FILTER_IP_PORT::default_instance());
    remoteport_ = const_cast< ::netmon::FILTER_IP_PORT*>(&::netmon::FILTER_IP_PORT::default_instance());
  }
}

FILTERINFO_EXTRADATA_tagTCP_DATA::FILTERINFO_EXTRADATA_tagTCP_DATA(const FILTERINFO_EXTRADATA_tagTCP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(NULL),
    remoteport_(NULL),
    bytcpflags_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTERINFO_EXTRADATA_tagTCP_DATA::~FILTERINFO_EXTRADATA_tagTCP_DATA() {
  if (this != &default_instance_) {
    delete localport_;
    delete remoteport_;
  }
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagTCP_DATA::descriptor() {
  if (FILTERINFO_EXTRADATA_tagTCP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTERINFO_EXTRADATA_tagTCP_DATA_descriptor_;
}

FILTERINFO_EXTRADATA_tagTCP_DATA* FILTERINFO_EXTRADATA_tagTCP_DATA::New() const {
  return new FILTERINFO_EXTRADATA_tagTCP_DATA;
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagTCP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTERINFO_EXTRADATA_tagTCP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTERINFO_EXTRADATA_tagTCP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const FILTERINFO_EXTRADATA_tagUDP_DATA FILTERINFO_EXTRADATA_tagUDP_DATA::default_instance_;



const int FILTERINFO_EXTRADATA_tagUDP_DATA::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagUDP_DATA, localport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagUDP_DATA, remoteport_),
};

FILTERINFO_EXTRADATA_tagUDP_DATA::FILTERINFO_EXTRADATA_tagUDP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(NULL),
    remoteport_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    localport_ = const_cast< ::netmon::FILTER_IP_PORT*>(&::netmon::FILTER_IP_PORT::default_instance());
    remoteport_ = const_cast< ::netmon::FILTER_IP_PORT*>(&::netmon::FILTER_IP_PORT::default_instance());
  }
}

FILTERINFO_EXTRADATA_tagUDP_DATA::FILTERINFO_EXTRADATA_tagUDP_DATA(const FILTERINFO_EXTRADATA_tagUDP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    localport_(NULL),
    remoteport_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTERINFO_EXTRADATA_tagUDP_DATA::~FILTERINFO_EXTRADATA_tagUDP_DATA() {
  if (this != &default_instance_) {
    delete localport_;
    delete remoteport_;
  }
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagUDP_DATA::descriptor() {
  if (FILTERINFO_EXTRADATA_tagUDP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTERINFO_EXTRADATA_tagUDP_DATA_descriptor_;
}

FILTERINFO_EXTRADATA_tagUDP_DATA* FILTERINFO_EXTRADATA_tagUDP_DATA::New() const {
  return new FILTERINFO_EXTRADATA_tagUDP_DATA;
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagUDP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTERINFO_EXTRADATA_tagUDP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTERINFO_EXTRADATA_tagUDP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const FILTERINFO_EXTRADATA_tagICMP_DATA FILTERINFO_EXTRADATA_tagICMP_DATA::default_instance_;



const int FILTERINFO_EXTRADATA_tagICMP_DATA::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagICMP_DATA, bytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagICMP_DATA, bycode_),
};

FILTERINFO_EXTRADATA_tagICMP_DATA::FILTERINFO_EXTRADATA_tagICMP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    bytype_(0),
    bycode_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

FILTERINFO_EXTRADATA_tagICMP_DATA::FILTERINFO_EXTRADATA_tagICMP_DATA(const FILTERINFO_EXTRADATA_tagICMP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    bytype_(0),
    bycode_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTERINFO_EXTRADATA_tagICMP_DATA::~FILTERINFO_EXTRADATA_tagICMP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagICMP_DATA::descriptor() {
  if (FILTERINFO_EXTRADATA_tagICMP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTERINFO_EXTRADATA_tagICMP_DATA_descriptor_;
}

FILTERINFO_EXTRADATA_tagICMP_DATA* FILTERINFO_EXTRADATA_tagICMP_DATA::New() const {
  return new FILTERINFO_EXTRADATA_tagICMP_DATA;
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagICMP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTERINFO_EXTRADATA_tagICMP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTERINFO_EXTRADATA_tagICMP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const FILTERINFO_EXTRADATA_tagIGMP_DATA FILTERINFO_EXTRADATA_tagIGMP_DATA::default_instance_;


const int FILTERINFO_EXTRADATA_tagIGMP_DATA::_offsets_[1] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA_tagIGMP_DATA, empty_),
};

FILTERINFO_EXTRADATA_tagIGMP_DATA::FILTERINFO_EXTRADATA_tagIGMP_DATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    empty_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

FILTERINFO_EXTRADATA_tagIGMP_DATA::FILTERINFO_EXTRADATA_tagIGMP_DATA(const FILTERINFO_EXTRADATA_tagIGMP_DATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    empty_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTERINFO_EXTRADATA_tagIGMP_DATA::~FILTERINFO_EXTRADATA_tagIGMP_DATA() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagIGMP_DATA::descriptor() {
  if (FILTERINFO_EXTRADATA_tagIGMP_DATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTERINFO_EXTRADATA_tagIGMP_DATA_descriptor_;
}

FILTERINFO_EXTRADATA_tagIGMP_DATA* FILTERINFO_EXTRADATA_tagIGMP_DATA::New() const {
  return new FILTERINFO_EXTRADATA_tagIGMP_DATA;
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA_tagIGMP_DATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTERINFO_EXTRADATA_tagIGMP_DATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTERINFO_EXTRADATA_tagIGMP_DATA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const FILTERINFO_EXTRADATA FILTERINFO_EXTRADATA::default_instance_;





const int FILTERINFO_EXTRADATA::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA, tcp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA, udp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA, icmp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTERINFO_EXTRADATA, igmp_data_),
};

FILTERINFO_EXTRADATA::FILTERINFO_EXTRADATA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    tcp_data_(NULL),
    udp_data_(NULL),
    icmp_data_(NULL),
    igmp_data_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    tcp_data_ = const_cast< ::netmon::FILTERINFO_EXTRADATA_tagTCP_DATA*>(&::netmon::FILTERINFO_EXTRADATA_tagTCP_DATA::default_instance());
    udp_data_ = const_cast< ::netmon::FILTERINFO_EXTRADATA_tagUDP_DATA*>(&::netmon::FILTERINFO_EXTRADATA_tagUDP_DATA::default_instance());
    icmp_data_ = const_cast< ::netmon::FILTERINFO_EXTRADATA_tagICMP_DATA*>(&::netmon::FILTERINFO_EXTRADATA_tagICMP_DATA::default_instance());
    igmp_data_ = const_cast< ::netmon::FILTERINFO_EXTRADATA_tagIGMP_DATA*>(&::netmon::FILTERINFO_EXTRADATA_tagIGMP_DATA::default_instance());
  }
}

FILTERINFO_EXTRADATA::FILTERINFO_EXTRADATA(const FILTERINFO_EXTRADATA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    tcp_data_(NULL),
    udp_data_(NULL),
    icmp_data_(NULL),
    igmp_data_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTERINFO_EXTRADATA::~FILTERINFO_EXTRADATA() {
  if (this != &default_instance_) {
    delete tcp_data_;
    delete udp_data_;
    delete icmp_data_;
    delete igmp_data_;
  }
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA::descriptor() {
  if (FILTERINFO_EXTRADATA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTERINFO_EXTRADATA_descriptor_;
}

FILTERINFO_EXTRADATA* FILTERINFO_EXTRADATA::New() const {
  return new FILTERINFO_EXTRADATA;
}

const ::google::protobuf::Descriptor* FILTERINFO_EXTRADATA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTERINFO_EXTRADATA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTERINFO_EXTRADATA::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const FILTER_INFO FILTER_INFO::default_instance_;







const int FILTER_INFO::_offsets_[6] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, protocoltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, localaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, remoteaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILTER_INFO, externdata_),
};

FILTER_INFO::FILTER_INFO()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    protocoltype_(0),
    direction_(0),
    operation_(0),
    localaddr_(NULL),
    remoteaddr_(NULL),
    externdata_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    localaddr_ = const_cast< ::netmon::FILTER_IP_ADDR*>(&::netmon::FILTER_IP_ADDR::default_instance());
    remoteaddr_ = const_cast< ::netmon::FILTER_IP_ADDR*>(&::netmon::FILTER_IP_ADDR::default_instance());
    externdata_ = const_cast< ::netmon::FILTERINFO_EXTRADATA*>(&::netmon::FILTERINFO_EXTRADATA::default_instance());
  }
}

FILTER_INFO::FILTER_INFO(const FILTER_INFO& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    protocoltype_(0),
    direction_(0),
    operation_(0),
    localaddr_(NULL),
    remoteaddr_(NULL),
    externdata_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FILTER_INFO::~FILTER_INFO() {
  if (this != &default_instance_) {
    delete localaddr_;
    delete remoteaddr_;
    delete externdata_;
  }
}

const ::google::protobuf::Descriptor* FILTER_INFO::descriptor() {
  if (FILTER_INFO_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return FILTER_INFO_descriptor_;
}

FILTER_INFO* FILTER_INFO::New() const {
  return new FILTER_INFO;
}

const ::google::protobuf::Descriptor* FILTER_INFO::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FILTER_INFO::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FILTER_INFO::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_IP_RULE LOG_IP_RULE::default_instance_;

const ::std::string LOG_IP_RULE::_default_userid_;
const ::std::string LOG_IP_RULE::_default_ruleid_;
const ::std::string LOG_IP_RULE::_default_name_;


const int LOG_IP_RULE::_offsets_[5] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_IP_RULE, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_IP_RULE, ruleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_IP_RULE, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_IP_RULE, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_IP_RULE, filterinfo_),
};

LOG_IP_RULE::LOG_IP_RULE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    ruleid_(const_cast< ::std::string*>(&_default_ruleid_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    valid_(0),
    filterinfo_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    filterinfo_ = const_cast< ::netmon::FILTER_INFO*>(&::netmon::FILTER_INFO::default_instance());
  }
}

LOG_IP_RULE::LOG_IP_RULE(const LOG_IP_RULE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    userid_(const_cast< ::std::string*>(&_default_userid_)),
    ruleid_(const_cast< ::std::string*>(&_default_ruleid_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    valid_(0),
    filterinfo_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_IP_RULE::~LOG_IP_RULE() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (ruleid_ != &_default_ruleid_) {
    delete ruleid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != &default_instance_) {
    delete filterinfo_;
  }
}

const ::google::protobuf::Descriptor* LOG_IP_RULE::descriptor() {
  if (LOG_IP_RULE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_IP_RULE_descriptor_;
}

LOG_IP_RULE* LOG_IP_RULE::New() const {
  return new LOG_IP_RULE;
}

const ::google::protobuf::Descriptor* LOG_IP_RULE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_IP_RULE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_IP_RULE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_ARP LOG_ARP::default_instance_;



const ::std::string LOG_ARP::_default_eh_destaddr_;
const ::std::string LOG_ARP::_default_eh_srcaddr_;
const ::std::string LOG_ARP::_default_arp_sender_haddr_;

const ::std::string LOG_ARP::_default_arp_target_haddr_;


const int LOG_ARP::_offsets_[9] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, block_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, eh_destaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, eh_srcaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, arp_sender_haddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, arp_sender_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, arp_target_haddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, arp_target_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_ARP, time_),
};

LOG_ARP::LOG_ARP()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    count_(0),
    block_type_(0),
    eh_destaddr_(const_cast< ::std::string*>(&_default_eh_destaddr_)),
    eh_srcaddr_(const_cast< ::std::string*>(&_default_eh_srcaddr_)),
    arp_sender_haddr_(const_cast< ::std::string*>(&_default_arp_sender_haddr_)),
    arp_sender_addr_(0u),
    arp_target_haddr_(const_cast< ::std::string*>(&_default_arp_target_haddr_)),
    arp_target_addr_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_ARP::LOG_ARP(const LOG_ARP& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    count_(0),
    block_type_(0),
    eh_destaddr_(const_cast< ::std::string*>(&_default_eh_destaddr_)),
    eh_srcaddr_(const_cast< ::std::string*>(&_default_eh_srcaddr_)),
    arp_sender_haddr_(const_cast< ::std::string*>(&_default_arp_sender_haddr_)),
    arp_sender_addr_(0u),
    arp_target_haddr_(const_cast< ::std::string*>(&_default_arp_target_haddr_)),
    arp_target_addr_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_ARP::~LOG_ARP() {
  if (eh_destaddr_ != &_default_eh_destaddr_) {
    delete eh_destaddr_;
  }
  if (eh_srcaddr_ != &_default_eh_srcaddr_) {
    delete eh_srcaddr_;
  }
  if (arp_sender_haddr_ != &_default_arp_sender_haddr_) {
    delete arp_sender_haddr_;
  }
  if (arp_target_haddr_ != &_default_arp_target_haddr_) {
    delete arp_target_haddr_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_ARP::descriptor() {
  if (LOG_ARP_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_ARP_descriptor_;
}

LOG_ARP* LOG_ARP::New() const {
  return new LOG_ARP;
}

const ::google::protobuf::Descriptor* LOG_ARP::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_ARP::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_ARP::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_AREA_AREA LOG_AREA_AREA::default_instance_;

const ::std::string LOG_AREA_AREA::_default_area_name_;

const ::std::string LOG_AREA_AREA::_default_area_gatemac_;

const ::std::string LOG_AREA_AREA::_default_time_;
const int LOG_AREA_AREA::_offsets_[5] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA_AREA, area_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA_AREA, area_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA_AREA, area_gatemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA_AREA, area_gateip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA_AREA, time_),
};

LOG_AREA_AREA::LOG_AREA_AREA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    area_name_(const_cast< ::std::string*>(&_default_area_name_)),
    area_type_(0u),
    area_gatemac_(const_cast< ::std::string*>(&_default_area_gatemac_)),
    area_gateip_(0u),
    time_(const_cast< ::std::string*>(&_default_time_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_AREA_AREA::LOG_AREA_AREA(const LOG_AREA_AREA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    area_name_(const_cast< ::std::string*>(&_default_area_name_)),
    area_type_(0u),
    area_gatemac_(const_cast< ::std::string*>(&_default_area_gatemac_)),
    area_gateip_(0u),
    time_(const_cast< ::std::string*>(&_default_time_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_AREA_AREA::~LOG_AREA_AREA() {
  if (area_name_ != &_default_area_name_) {
    delete area_name_;
  }
  if (area_gatemac_ != &_default_area_gatemac_) {
    delete area_gatemac_;
  }
  if (time_ != &_default_time_) {
    delete time_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_AREA_AREA::descriptor() {
  if (LOG_AREA_AREA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_AREA_AREA_descriptor_;
}

LOG_AREA_AREA* LOG_AREA_AREA::New() const {
  return new LOG_AREA_AREA;
}

const ::google::protobuf::Descriptor* LOG_AREA_AREA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_AREA_AREA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_AREA_AREA::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const LOG_AREA LOG_AREA::default_instance_;





const int LOG_AREA::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA, new_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA, old_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA, area_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_AREA, time_),
};

LOG_AREA::LOG_AREA()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    new_area_(NULL),
    old_area_(NULL),
    area_opt_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    new_area_ = const_cast< ::netmon::LOG_AREA_AREA*>(&::netmon::LOG_AREA_AREA::default_instance());
    old_area_ = const_cast< ::netmon::LOG_AREA_AREA*>(&::netmon::LOG_AREA_AREA::default_instance());
  }
}

LOG_AREA::LOG_AREA(const LOG_AREA& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    new_area_(NULL),
    old_area_(NULL),
    area_opt_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_AREA::~LOG_AREA() {
  if (this != &default_instance_) {
    delete new_area_;
    delete old_area_;
  }
}

const ::google::protobuf::Descriptor* LOG_AREA::descriptor() {
  if (LOG_AREA_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_AREA_descriptor_;
}

LOG_AREA* LOG_AREA::New() const {
  return new LOG_AREA;
}

const ::google::protobuf::Descriptor* LOG_AREA::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_AREA::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_AREA::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_USER_SETTING LOG_USER_SETTING::default_instance_;




const int LOG_USER_SETTING::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_USER_SETTING, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_USER_SETTING, opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_USER_SETTING, time_),
};

LOG_USER_SETTING::LOG_USER_SETTING()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    type_(0u),
    opt_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_USER_SETTING::LOG_USER_SETTING(const LOG_USER_SETTING& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    type_(0u),
    opt_(0u),
    time_(GOOGLE_LONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_USER_SETTING::~LOG_USER_SETTING() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_USER_SETTING::descriptor() {
  if (LOG_USER_SETTING_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_USER_SETTING_descriptor_;
}

LOG_USER_SETTING* LOG_USER_SETTING::New() const {
  return new LOG_USER_SETTING;
}

const ::google::protobuf::Descriptor* LOG_USER_SETTING::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_USER_SETTING::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_USER_SETTING::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_DEBUG LOG_DEBUG::default_instance_;


const ::std::string LOG_DEBUG::_default_bug_module_;


const int LOG_DEBUG::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_DEBUG, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_DEBUG, bug_module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_DEBUG, bug_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_DEBUG, bug_level_),
};

LOG_DEBUG::LOG_DEBUG()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_LONGLONG(0)),
    bug_module_(const_cast< ::std::string*>(&_default_bug_module_)),
    bug_type_(0u),
    bug_level_(0u) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_DEBUG::LOG_DEBUG(const LOG_DEBUG& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_LONGLONG(0)),
    bug_module_(const_cast< ::std::string*>(&_default_bug_module_)),
    bug_type_(0u),
    bug_level_(0u) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_DEBUG::~LOG_DEBUG() {
  if (bug_module_ != &_default_bug_module_) {
    delete bug_module_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_DEBUG::descriptor() {
  if (LOG_DEBUG_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_DEBUG_descriptor_;
}

LOG_DEBUG* LOG_DEBUG::New() const {
  return new LOG_DEBUG;
}

const ::google::protobuf::Descriptor* LOG_DEBUG::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_DEBUG::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_DEBUG::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_UPDATE LOG_UPDATE::default_instance_;


const ::std::string LOG_UPDATE::_default_update_file_;



const int LOG_UPDATE::_offsets_[5] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_UPDATE, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_UPDATE, update_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_UPDATE, file_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_UPDATE, breboot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_UPDATE, bsuccess_),
};

LOG_UPDATE::LOG_UPDATE()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_LONGLONG(0)),
    update_file_(const_cast< ::std::string*>(&_default_update_file_)),
    file_type_(0u),
    breboot_(0u),
    bsuccess_(false) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_UPDATE::LOG_UPDATE(const LOG_UPDATE& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_LONGLONG(0)),
    update_file_(const_cast< ::std::string*>(&_default_update_file_)),
    file_type_(0u),
    breboot_(0u),
    bsuccess_(false) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_UPDATE::~LOG_UPDATE() {
  if (update_file_ != &_default_update_file_) {
    delete update_file_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_UPDATE::descriptor() {
  if (LOG_UPDATE_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_UPDATE_descriptor_;
}

LOG_UPDATE* LOG_UPDATE::New() const {
  return new LOG_UPDATE;
}

const ::google::protobuf::Descriptor* LOG_UPDATE::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_UPDATE::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_UPDATE::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const LOG_SHEID LOG_SHEID::default_instance_;





const ::std::string LOG_SHEID::_default_reason_id_;
const int LOG_SHEID::_offsets_[5] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_SHEID, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_SHEID, block_pc_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_SHEID, attack_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_SHEID, attack_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOG_SHEID, reason_id_),
};

LOG_SHEID::LOG_SHEID()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_ULONGLONG(0)),
    block_pc_ip_(0),
    attack_times_(0u),
    attack_type_(0u),
    reason_id_(const_cast< ::std::string*>(&_default_reason_id_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

LOG_SHEID::LOG_SHEID(const LOG_SHEID& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    time_(GOOGLE_ULONGLONG(0)),
    block_pc_ip_(0),
    attack_times_(0u),
    attack_type_(0u),
    reason_id_(const_cast< ::std::string*>(&_default_reason_id_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

LOG_SHEID::~LOG_SHEID() {
  if (reason_id_ != &_default_reason_id_) {
    delete reason_id_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LOG_SHEID::descriptor() {
  if (LOG_SHEID_descriptor_ == NULL) proto_BuildDescriptors_netmonlog_2eproto();
  return LOG_SHEID_descriptor_;
}

LOG_SHEID* LOG_SHEID::New() const {
  return new LOG_SHEID;
}

const ::google::protobuf::Descriptor* LOG_SHEID::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
LOG_SHEID::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* LOG_SHEID::GetReflection() {
  return &_reflection_;
}

}  // namespace netmon
